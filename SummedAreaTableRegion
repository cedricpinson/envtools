/* -*-c++-*- */

#pragma once

#ifndef SUMMED_AREA_TABLE_REGION_H
#define SUMMED_AREA_TABLE_REGION_H 1

#include "ExtractLightsVariance"
#include "SummedAreaTable"

/**
 * A subregion in a SummedAreaTable.
 */
struct satRegion
{
public:

    const SummedAreaTable* _sat;

    // satRegion non-discrete center
    double2 coord;

    int _x, _y;
    uint _w, _h;

    // respectively for mean, variance, skewness, kurtosis
    double _sum, _sum1, _sum2, _sum3,_sum4, _sum5;

    // color sums allowing to deduce mean color
    double _r, _g, _b;

    double getSum() const
    {
        return _sum;
    }

    double getMean() const
    {
        return _sum / areaSize();
    }

    double getGeometricMean() const
    {
        // log average fomulae
        return exp(_sum1 / areaSize());
    }

    //https://en.wikipedia.org/wiki/Summed_area_table#Extensions
    double getVariance() const
    {
        const double mean =  getMean();
        //return (_sum2 - (_sum*_sum)/ areaSize())/ areaSize();
        return (_sum2 / areaSize()) - (mean*mean);
    }

    //https://en.wikipedia.org/wiki/Summed_area_table#Extensions
    double getGeometricVariance() const
    {
        const double gmean =  getGeometricMean();
        return (_sum2 / areaSize()) - (gmean*gmean);
    }

    // http://vision.okstate.edu/pubs/ssiai_tp_1.pdf
    double getDeviation() const
    {
        double variance= _sum2 / areaSize();
        return sqrt(variance);
    }

    // http://vision.okstate.edu/pubs/ssiai_tp_1.pdf
    double getSkewness() const
    {
        double deviation = getDeviation();
        return deviation * deviation *  _sum3 / areaSize();
    }

    // http://vision.okstate.edu/pubs/ssiai_tp_1.pdf
    double getKurtosis() const
    {
        double deviation = getDeviation();
        return deviation * deviation *  deviation * _sum4 / areaSize();
    }

    //Two Stage Importance Sampling for Direct Lighting
    // page 4, equation 2
    // Cline etAll 2006
    double getRegionWeight() const
    {

        double f00 = _sat->I1(_x,_y);
        double f10 = _sat->I1(_x+_w,_y);
        double f01 = _sat->I1(_x,_y+_h);
        double f11 = _sat->I1(_x+_w,_y+_h);

        return _sum * (f00 + f10 + f01 + f11) * 0.25;
    }

    //Two Stage Importance Sampling for Direct Lighting
    // page 4, equation 3
    // Cline etAll 2006
    double getCornerDeviation() const
    {
        const double2 c = centroid();
        const double fav = _sat->I1(c._x,c._y);


        double f00fav = _sat->I1(_x,_y) - fav;
        double f10fav = _sat->I1(_x+ _w,_y) - fav;
        double f01fav = _sat->I1(_x,_y+_h) - fav;
        double f11fav = _sat->I1(_x+ _w,_y+_h) - fav;

        f00fav *= f00fav;
        f10fav *= f10fav;
        f01fav *= f01fav;
        f11fav *= f11fav;

        return 0.5 * sqrt(f00fav + f10fav + f01fav + f11fav);
    }
    //Two Stage Importance Sampling for Direct Lighting
    // page 4, equation 3
    // Cline etAll 2006
    double splitPotential() const
    {
        // psplit(R) = σf(R) sum(R) area(R), (3)
        // where sum(R)is the sum of the environment map over region
        // R, area(R)is the area of the region, and σf(R)is the standard
        // deviation of the f values at the corners of R:

        return getCornerDeviation() * getSum() * areaSize();

    };




    void create(const int x, const int y, const uint w, const uint h, const SummedAreaTable* sat)
    {
        _x = x; _y = y; _w = w; _h = h; _sat = sat;

            _sum = _sat->sum(x,       y,
                             x+(w-1), y,
                             x+(w-1), y+(h-1),
                             x,       y+(h-1));

            _r = _sat->sumR(x,       y,
                             x+(w-1), y,
                             x+(w-1), y+(h-1),
                             x,       y+(h-1));

            _g = _sat->sumG(x,       y,
                             x+(w-1), y,
                             x+(w-1), y+(h-1),
                             x,       y+(h-1));

            _b = _sat->sumB(x,       y,
                             x+(w-1), y,
                             x+(w-1), y+(h-1),
                             x,       y+(h-1));


            _sum2 = _sat->sum2(x,       y,
                             x+(w-1), y,
                             x+(w-1), y+(h-1),
                             x,       y+(h-1));

            _sum3 = _sat->sum3(x,       y,
                             x+(w-1), y,
                             x+(w-1), y+(h-1),
                             x,       y+(h-1));

            _sum4 = _sat->sum4(x,       y,
                             x+(w-1), y,
                             x+(w-1), y+(h-1),
                             x,       y+(h-1));

            _sum5 = _sat->sum5(x,       y,
                             x+(w-1), y,
                             x+(w-1), y+(h-1),
                             x,       y+(h-1));



    }

#define VARIANCE_MIN 1
#ifndef VARIANCE_MIN

// MEDIAN CUT Fastest by far

    // median cut split criteria
    double splitCriteria(const satRegion &sat) const
    {
        // median cut
        return sat.getSum() * 2.0 >= getSum();

    }

    void split_w(satRegion& A) const
    {
        for (uint  w = 1; w <= _w; ++w)
        {
            A.create(_x, _y, w, _h, _sat);

            // if region left has approximately half the energy of the entire thing stahp
            if (splitCriteria(A))
                break;
        }
    }

    void split_h(satRegion& A) const
    {
        for (uint h = 1; h <= _h; ++h)
        {
            A.create(_x, _y, _w, h, _sat);

            // if region top has approximately half the energy of the entire thing stahp
            if (splitCriteria(A))
                break;
        }
    }

#else
    // VARIANCE MIN: slowest, better balance
    double splitCriteria() const
    {
        return
            splitPotential();
            //getMean()
            //getGeometricMean()
            //getGeometricVariance()
            //getDeviation()
            //getSkewness()
            //getKurtosis()
            //getVariance()
            //getSum()
                ;
    }


    void split_w(satRegion& A) const
    {
        assert(_w > 2);

        double minV = DBL_MAX;
        double maxV = DBL_MIN;

        satRegion B;
        uint minSplt;
        for (uint  w = 1; w <= _w; ++w)
        {
            A.create(_x, _y, w, _h, _sat);
            B.create(_x + w-1, _y, _w - w, _h, _sat);

            // maximum of the two sub-regions' variances is minimized.
            maxV = std::max(A.splitCriteria(), B.splitCriteria());

            if(minV > maxV){
                minV = maxV;
                minSplt = w;
            }
        }
        A.create(_x, _y, minSplt, _h, _sat);
    }

    void split_h(satRegion& A) const
    {
        assert(_h > 2);

        double minV = DBL_MAX;
        double maxV = DBL_MIN;

        satRegion B;
        uint minSplt;
        for (uint h = 1; h <= _h; ++h)
        {
            A.create(_x, _y, _w, h, _sat);
            B.create(_x, _y + h-1, _w, _h - h, _sat);

            // maximum of the two sub-regions' variances is minimized.
            maxV = std::max(A.splitCriteria(), B.splitCriteria());

            if(minV > maxV){
                minV = maxV;
                minSplt = h;
            }
        }
        A.create(_x, _y, _w, minSplt, _sat);

    }

#endif// VARIANCE_MIN

    /**
     * Split region horizontally into subregions A and B.
     */
    void split_w(satRegion& A, satRegion& B) const
    {
        split_w(A);
        B.create(_x + (A._w-1), _y, _w - A._w, _h, _sat);
    }

    /**
     * Split region vertically into subregions A and B.
     */
    void split_h(satRegion& A, satRegion& B) const
    {
        split_h(A);
        B.create(_x, _y + (A._h-1), _w, _h - A._h, _sat);
    }

    double2 centroid() const
    {
        double2 c;
        c._x = _x + _w*0.5;
        c._y = _y + _h*0.5;
        return c;
    }

    double areaSize() const
    {
        return _w * _h;
    }


};

#endif // SUMMED_AREA_TABLE_REGION_H
